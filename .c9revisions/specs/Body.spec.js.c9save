{"ts":1352519329630,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/// <reference path=\"_references.js\" />\n\ndefine(\n['src/Body', 'src/Vector'],\nfunction (Body, Vector) {\n    var _spec = this;\n\n    describe('Body Class', function () {\n        beforeEach(function () {\n            _spec.atRest = new Body({ \n                mass: 10, \n                x: 0, y: 0,\n                v: { magnitude: 0, angle: 0 }\n            }); \n            _spec.inMotion = new Body({\n                mass: 10,\n                x: 0, y: 0,\n                v: { magnitude: 1, angle: 0 }\n            })   \n        })\n\n        describe(\"Newton's First Law (Inertia)\", function () {\n            it('An object at rest will remain at rest', function () {\n                // Check on the body after 30 seconds\n                _spec.atRest.advance(30000);\n\n                // Should not have moved\n                expect(atRest.x).toEqual(0);\n                expect(atRest.y).toEqual(0);\n            });\n\n            it('unless acted on by an unbalanced force', function () {\n                // Apply an a force for 1 second and then check on it\n                _spec.atRest.forces.push({ magnitude: { value: 4, duration: 1000 }, angle: 45 });\n                _spec.atRest.advance(1000);\n\n                // Should have moved\n                expect(_spec.atRest.x).not.toEqual(0);\n                expect(_spec.atRest.y).not.toEqual(0);\n            });\n\n            it('An object in motion continues in motion with the same speed and in the same direction', function () {\n                // First, make sure it starts at zero\n                expect(_spec.inMotion.x).toEqual(0);\n                expect(_spec.inMotion.y).toEqual(0);\n                \n                // Check on the body after 30 seconds\n                _spec.inMotion.advance(30000);\n\n                // Should have stayed in motion\n                expect(_spec.inMotion.x).toEqual(30);\n                expect(_spec.inMotion.y).toEqual(0);\n            })\n        });\n    });\n});"]],"start1":0,"start2":0,"length1":0,"length2":1946}]],"length":1946}
{"contributors":[],"silentsave":false,"ts":1352519446197,"patch":[[{"diffs":[[0,"      })"],[1,";"],[0,"   \n    "]],"start1":503,"start2":503,"length1":16,"length2":17},{"diffs":[[0,"      })"],[1,";"],[0,"\n\n      "]],"start1":518,"start2":518,"length1":16,"length2":17},{"diffs":[[0,"     expect("],[1,"_spec."],[0,"atRest.x).to"]],"start1":814,"start2":814,"length1":24,"length2":30},{"diffs":[[0," expect("],[1,"_spec."],[0,"atRest.y"]],"start1":869,"start2":869,"length1":16,"length2":22}]],"length":1960,"saved":false}
{"contributors":["tim.hall.engr@gmail.com","rchall@args.us"],"silentsave":false,"ts":1352582013766,"patch":[[{"diffs":[[0,"/>\n\n"],[-1,"define(\n['src/Body', 'src/Vector'],\nfunction (Body, Vector) {\n    var _spec = this;\n\n    describe('Body Class', function () {\n        beforeEach(function () {\n            _spec.atRest = new Body({ \n                mass: 10, \n                x: 0, y: 0,\n                v: { magnitude: 0, angle: 0 }\n            }); \n            _spec.inMotion = new Body({\n                mass: 10,\n                x: 0, y: 0,\n                v: { magnitude: 1, angle: 0 }\n            });   \n        });\n\n        describe(\"Newton's First Law (Inertia)\", function () {\n            it('An object at rest will remain at rest', function () {"],[1,"// define = create a new module\ndefine(\n    \n// Write out any dependencies that are needed\n['src/Body', 'src/Vector'],\n\n// and pass them into the module\nfunction (Body, Vector) {\n    \n    // This is just a convenient way to save 'this' since \n    // 'this' is all sorts of headaches in js\n    var _spec = this;\n\n    \n    // I like to set up a main group for each spec module\n    describe('Body Class', function () {\n        \n        // This is stuff that is run before every spec below\n        // I like to put stuff here so that it gets reset every time\n        // and you don't get any conflicts between specs\n        beforeEach(function () {\n            \n            // (we'll talk about this in a sec)\n            _spec.atRest = new Body({ \n                mass: 10, \n                x: 0, y: 0,\n                v: { magnitude: 0, angle: 0 }\n            }); \n            _spec.inMotion = new Body({\n                mass: 10,\n                x: 0, y: 0,\n                v: { magnitude: 1, angle: 0 }\n            });   \n        });\n\n        \n        // So within the main module this is a group of specs \n        // (Newton's 1st, cute right!)\n        describe(\"Newton's First Law (Inertia)\", function () {\n            \n            // This is just some sentence to describe the spec\n            // Traditional style is that it should begin with 'should'\n            // ala It 'should do something cool'\n            it('An object at rest will remain at rest', function () {\n                \n                // This is the actual code for the spec\n                \n                // First, do some stuff...\n\n                // Then, each spec should have some idea of 'pass/fail'\n\n                expect(2 + 2).toEqual(4);\n                expect(2 + 2).not.toEqual(5);\n                "],[0,"\n   "]],"start1":37,"start2":37,"length1":628,"length2":1794},{"diffs":[[0,"advance(30000);\n"],[1,"                "],[0,"\n               "]],"start1":1911,"start2":1911,"length1":32,"length2":48},{"diffs":[[0," not have moved\n"],[1,"                // with zero velocity and initial position            \n"],[0,"                "]],"start1":1969,"start2":1969,"length1":32,"length2":103}]],"length":3213,"saved":false}

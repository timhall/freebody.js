{"ts":1352569265696,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Vector class to represent forces, velocities, etc.\n * \n * Example:\n * ```\n * var force = new Vector();\n * \n * // Set magnitude and angle of force\n * force.magnitude = 12;\n * force.angle = 45;\n * \n * // Get x- and y-components\n * var forceX = force.x(),\n *     forceY = force.y();\n * \n * // Can also create force from components\n * force = new Vector();\n * force.x(3);\n * force.y(4);\n * \n * var forceNet = force.magnitude; // = 5\n * \n * // Finally, set values quickly inline\n * force = new Vector({ magnitude: 12, angle: 45 });\n * force = new Vector({ x: 3, y: 4 });\n * \n * ```\n */\ndefine(\n[],\nfunction () {\n    var \n        /**\n         * @class Vector\n         * @param {Object} [options]\n         *     Any options to set inline (magnitude or angle)\n         * @return {Object} Vector\n         */\n\n        Vector = function (options) {\n            \n        },\n\n        /**\n         * Determine the x-component of the vector\n         *\n         * @return {Number} x-component\n         */\n\n        x = function () {\n            // Things to do:\n            // 1. Figure out how angles are set\n            //     (i.e. where's zero + what direction does it rotate\n            // 2. Figure out the x component in the following coordinate system\n            //     x right +, y down +, top-left is 0,0\n        },\n\n        /**\n         * Determine the y-component of the vector\n         *\n         * @return {Number} y-component\n         */\n\n        y = function () {\n            // Simlar to above\n        };\n\n    /*\n     * @prototype\n     */\n    Vector.prototype.x = x;\n    Vector.prototype.y = y;\n\n    return Vector;\n});"]],"start1":0,"start2":0,"length1":0,"length2":1626}]],"length":1626}
